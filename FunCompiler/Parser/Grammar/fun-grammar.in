program
program -> "start" declarePart programBody "end"

declarePart -> "declare" declareList "enddeclare"
declareList -> declaration ";" | declaration ";" declareList

declaration -> simpeDeclaration | assignDeclaration | constDeclaration 
simpeDeclaration -> "var" "0" type
assignDeclaration -> "var" "0" type "is" "1"
constDeclaration -> "const" "0" type "is" "1"

type -> simpleType | arrayType
simpleType -> "integer" | "bool" | "char" | "string"
arrayType -> "array" "of" simpleType "1"

programBody -> "body" compoundStatement "endbody"

compoundStatement -> statementList
statementList -> statement | statement statementList
statement -> simpleStatement | structStatment

simpleStatement -> assignStatement | ioStatement 
assignStatement -> "0" "is" expression ";"
ioStatement -> ioExpr expression ";"
ioExpr -> "read" | "write"

structStatment -> ifStatement | whileStatement | forStatement

ifStatement -> "if" "(" condition ")" compoundStatement "endif" | "if" "(" condition ")" compoundStatement "else" compoundStatement "endif"

whileStatement -> "while" "(" condition ")" compoundStatement "endwhile"
forStatement -> "for" "0" "("expression "," expression "," expression")" compoundStatement "endfor"

expression -> expression basicOperators term | term
basicOperators -> "+" | "-"
term -> term multiplyOperators factor | factor
multiplyOperators -> "*" | "//" | "%"
factor -> "(" expression ")" | "0" | "1" 

condition -> expression RELATION expression
RELATION -> "<" | "<=" | "=" | "!=" | ">=" | ">" | "and" | "or"